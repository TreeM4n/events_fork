mem_ancestors_grudge_give_random_archeotech = {
	if = {
		limit = {
			host_has_dlc = "Ancient Relics Story Pack"
		}
		add_random_research_option = {
			category = archaeostudies
			#area = RANDOM
			#tier = <int>
			add_progress = 0.5
			ignore_prereqs = no
			ignore_rare = no
			only_rare = no
			ignore_insight = yes
			fail_effects = {
				add_resource = {
					minor_artifacts = 100
				}
				add_monthly_resource_mult = {
					resource = physics_research
					value = 1
				}
				add_monthly_resource_mult = {
					resource = society_research
					value = 1
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = 1
				}
			}
		}
	}
	else = {
		add_random_research_option = {
			category = materials
			#area = RANDOM
			#tier = <int>
			add_progress = 0.5
			ignore_prereqs = no
			ignore_rare = no
			only_rare = no
			ignore_insight = yes
			fail_effects = {
				add_monthly_resource_mult = {
					resource = engineering_research
					value = 3
				}
			}
		}
	}
}

mem_ancestors_grudge_remove_all_relics = {
	if = {
		limit = {
			has_relic = r_mem_ancestors_grudge_pauldron
		}
		remove_relic = r_mem_ancestors_grudge_pauldron
	}
	if = {
		limit = {
			has_relic = r_mem_ancestors_grudge_ring
		}
		remove_relic = r_mem_ancestors_grudge_ring
	}
	if = {
		limit = {
			has_relic = r_mem_ancestors_grudge_sword
		}
		remove_relic = r_mem_ancestors_grudge_sword
	}
}

mem_ancestors_grudge_trait_effect = {
	add_trait = leader_trait_legendary_mem_ancestors_grudge_relicowner
	hidden_effect = {
		set_variable = {
			which = mem_ancestors_grudge_smithing_purity_rolled
			value = owner.mem_ancestors_grudge_smithing_purity_rolled
		}
		set_variable = {
			which = mem_ancestors_grudge_smithing_quality_rolled
			value = owner.mem_ancestors_grudge_smithing_quality_rolled
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag1
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag1
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag2
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag2
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag3
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag3
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag4
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag4
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag5
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag5
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag6
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag6
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag7
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag7
		}
		if = {
			limit = {
				owner = {
					has_country_flag = mem_ancestors_grudge_relic_flag8
				}
			}
			set_leader_flag = mem_ancestors_grudge_relic_flag8
		}
	}
}

mem_ancestors_grudge_increase_jobs_onforge_planet = {
	custom_tooltip = mem_ancestors_grudge_increase_jobs_onforge_planet_tt
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_relicforge_extrajobs
			value = 1
		}
	}
}

mem_ancestors_grudge_add_relic_modifier = {
	reroll_random = yes
	random_list = {
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag1
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag1
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag2
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag2
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag3
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag3
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag4
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag4
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag5
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag5
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag6
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag6
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag7
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag7
				factor = 0
			}
		}
		1 = {
			set_country_flag = mem_ancestors_grudge_relic_flag8
			modifier = {
				has_country_flag = mem_ancestors_grudge_relic_flag8
				factor = 0
			}
		}
	}
}

# Malthus' new script for Relic-Crafting
# Beginning of Situation
# This effect will define the minimum quality result of the situation
# Minimum can range from 1 - 5
mem_ancestors_grudge_roll_quality_min = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_quality_1
		100 = {
			# If a threshold in smithing quality is surpassed, this quality will not be chosen as minimum
			modifier = {
				factor = 0
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.1
					}
				}
			}
			# If a threshold in smithing quality is not surpassed, this outcome will be more likely
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.05
					}
				}
			}
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.08
					}
				}
			}
			# Set minimum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value = 1
			}
		}
		# mem_ancestors_grudge_quality_2
		100 = {
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.15
					}
				}
			}
			# If a threshold in smithing quality is not surpassed, this outcome will be more likely
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.08
					}
				}
			}
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.12
					}
				}
			}
			# Set minimum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value = 2
			}
		}
		# mem_ancestors_grudge_quality_3
		100 = {
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.25
					}
				}
			}
			# If a threshold in smithing quality is not surpassed, this outcome will be more likely
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.1
					}
				}
			}
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.2
					}
				}
			}
			# Set minimum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value = 3
			}
		}
		# mem_ancestors_grudge_quality_4
		100 = {
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.5
					}
				}
			}
			# If a threshold in smithing quality is not surpassed, this outcome will be more likely
			modifier = {
				factor = 2
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.25
					}
				}
			}
			# Set minimum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value = 4
			}
		}
		# mem_ancestors_grudge_quality_5
		100 = {
			# Set minimum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value = 5
			}
		}
	}
}

# This effect will define the maximum quality result of the situation
# Maximum can range from 2 - 7
# Maximum will always be atleast 1 level higher than minimum
mem_ancestors_grudge_roll_quality_max = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_quality_2
		100 = {
			# If outcome is not higher than min, it will be
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value >= 2
				}
			}
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.1
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 2
			}
		}
		# mem_ancestors_grudge_quality_3
		100 = {
			# If outcome is not higher than min, it will be
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value >= 3
				}
			}
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.15
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 3
			}
		}
		# mem_ancestors_grudge_quality_4
		100 = {
			# If outcome is not higher than min, it will be
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value >= 4
				}
			}
			# If a threshold in smithing quality is surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value > 0.2
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 4
			}
		}
		# mem_ancestors_grudge_quality_5
		100 = {
			# If outcome is not higher than min, it will be
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value >= 5
				}
			}
			# If a threshold in smithing quality is not surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.2
					}
				}
			}
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.05
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 5
			}
		}
		# mem_ancestors_grudge_quality_6
		100 = {
			# If a threshold in smithing quality is not surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.35
					}
				}
			}
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.15
					}
				}
			}
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.05
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 6
			}
		}
		# mem_ancestors_grudge_quality_7
		100 = {
			# If a threshold in smithing quality is not surpassed, this quality will be less likely
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.5
					}
				}
			}
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.25
					}
				}
			}
			modifier = {
				factor = 0.5
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_artifact_power_produces_mult
						value < 0.1
					}
				}
			}
			# Set maximum quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_max
				value = 7
			}
		}
	}
}

# This effect will define the minimum purity result of the situation
# Minimum can range from 1 - 4
# Chances are antiproportionally affected by the result of quality min -> higher quality makes high purity a bit less likely
# Rune power makes higher quality more likely
mem_ancestors_grudge_roll_purity_min = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_purity_1
		100 = {
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_min
				value = 1
			}
		}
		# mem_ancestors_grudge_purity_2
		75 = {
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_min
				value = 2
			}
		}
		# mem_ancestors_grudge_purity_3
		50 = {
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_min
				value = 3
			}
		}
		# mem_ancestors_grudge_purity_4
		50 = {
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_min
				value = 4
			}
		}
	}
}

# This effect will define the maximum purity result of the situation
# Maximum can range from 2 - 5
# Chances are antiproportionally affected by the result of quality min -> higher quality makes high purity a bit less likely
# Rune power makes higher quality more likely
mem_ancestors_grudge_roll_purity_max = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_purity_2
		100 = {
			# If min is on the same level or higher this will not happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_rune_purity_min
					value >= 2
				}
			}
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.75
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_max
				value = 2
			}
		}
		# mem_ancestors_grudge_purity_3
		75 = {
			# If min is on the same level or higher this will not happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_rune_purity_min
					value >= 3
				}
			}
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.8
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_max
				value = 3
			}
		}
		# mem_ancestors_grudge_purity_4
		50 = {
			# If min is on the same level or higher this will not happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_rune_purity_min
					value >= 4
				}
			}
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 0.9
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_max
				value = 4
			}
		}
		# mem_ancestors_grudge_purity_5
		50 = {
			# Multiply it with min quality value to increse likelyhood
			modifier = {
				factor = mem_ancestors_grudge_smithing_quality_min
			}
			# Decrease likelyhood with higher rune power
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.1
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.2
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.3
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.4
					}
				}
			}
			modifier = {
				factor = 1.1
				owner = {
					check_modifier_value = {
						modifier = mem_ancestors_grudge_rune_power_produces_mult
						value > 0.5
					}
				}
			}
			# Set minimum rune quality
			set_variable = {
				which = mem_ancestors_grudge_rune_purity_max
				value = 5
			}
		}
	}
}

# End of Situation
mem_ancestors_grudge_roll_quality_final = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_quality_1
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value > 1
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 1
			}
		}
		# mem_ancestors_grudge_quality_2
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_min
						value > 2
					}
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_max
						value < 2
					}
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 2
			}
		}
		# mem_ancestors_grudge_quality_3
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_min
						value > 3
					}
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_max
						value < 3
					}
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 3
			}
		}
		# mem_ancestors_grudge_quality_4
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_min
						value > 4
					}
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_max
						value < 4
					}
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 4
			}
		}
		# mem_ancestors_grudge_quality_5
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_min
						value > 5
					}
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_max
						value < 5
					}
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 5
			}
		}
		# mem_ancestors_grudge_quality_6
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_min
						value > 6
					}
					check_variable = {
						which = mem_ancestors_grudge_smithing_quality_max
						value < 6
					}
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 6
			}
		}
		# mem_ancestors_grudge_quality_7
		100 = {
			# If quality value lies outside of min and max it won't happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_smithing_quality_max
					value < 7
				}
			}
			# Set final quality variable
			set_variable = {
				which = mem_ancestors_grudge_smithing_quality_final
				value = 7
			}
		}
	}
	# Put the value on the already used variable
	owner = {
		set_variable = {
			which = mem_ancestors_grudge_smithing_quality_final
			value = prev.mem_ancestors_grudge_smithing_quality_final
		}
		set_variable = {
			which = mem_ancestors_grudge_smithing_quality_rolled
			value = prev.mem_ancestors_grudge_smithing_quality_final
		}
		# This value is used as a factor with <tier> -1 for adding bonuses (tier 1 gets none)
		# also used in event checks after relic is finished (don't want to change them again)
		change_variable = {
			which = mem_ancestors_grudge_smithing_quality_rolled
			value = -1
		}
	}
}

# End of Situation
mem_ancestors_grudge_roll_purity_final = {
	reroll_random = yes
	random_list = {
		# mem_ancestors_grudge_purity_1
		100 = {
			# If purity value lies outsdte of min and max it won't happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_rune_purity_min
					value > 1
				}
			}
			owner = {
				# Set final purity variable - for naming
				set_variable = {
					which = mem_ancestors_grudge_rune_purity_final
					value = 1
				}
				# For Relic modifier
				set_variable = {
					which = mem_ancestors_grudge_smithing_purity_rolled
					value = 0.5
				}
			}
		}
		# mem_ancestors_grudge_purity_2
		100 = {
			# If purity value lies outsdte of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_min
						value > 2
					}
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_max
						value < 2
					}
				}
			}
			owner = {
				# Set final purity variable - for naming
				set_variable = {
					which = mem_ancestors_grudge_rune_purity_final
					value = 2
				}
				# For Relic modifier
				set_variable = {
					which = mem_ancestors_grudge_smithing_purity_rolled
					value = 0.75
				}
			}
		}
		# mem_ancestors_grudge_purity_3
		100 = {
			# If purity value lies outsdte of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_min
						value > 3
					}
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_max
						value < 3
					}
				}
			}
			owner = {
				# Set final purity variable - for naming
				set_variable = {
					which = mem_ancestors_grudge_rune_purity_final
					value = 3
				}
				# For Relic modifier
				set_variable = {
					which = mem_ancestors_grudge_smithing_purity_rolled
					value = 1
				}
			}
		}
		# mem_ancestors_grudge_purity_4
		100 = {
			# If purity value lies outsdte of min and max it won't happen
			modifier = {
				factor = 0
				OR = {
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_min
						value > 4
					}
					check_variable = {
						which = mem_ancestors_grudge_rune_purity_max
						value < 4
					}
				}
			}
			owner = {
				# Set final purity variable - for naming
				set_variable = {
					which = mem_ancestors_grudge_rune_purity_final
					value = 4
				}
				# For Relic modifier
				set_variable = {
					which = mem_ancestors_grudge_smithing_purity_rolled
					value = 1.25
				}
			}
		}
		# mem_ancestors_grudge_purity_5
		100 = {
			# If purity value lies outsdte of min and max it won't happen
			modifier = {
				factor = 0
				check_variable = {
					which = mem_ancestors_grudge_rune_purity_max
					value < 5
				}
			}
			owner = {
				# Set final purity variable - for naming
				set_variable = {
					which = mem_ancestors_grudge_rune_purity_final
					value = 5
				}
				# For Relic modifier
				set_variable = {
					which = mem_ancestors_grudge_smithing_purity_rolled
					value = 1.5
				}
			}
		}
	}
}

# Crafting event effects to change quality and purity outcomes
# add min quality
mem_ancestors_grudge_roll_quality_min_add = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_quality_min
			value = 1
		}
	}
}

# substract min quality
mem_ancestors_grudge_roll_quality_min_sub = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_quality_min
			value = -1
		}
	}
}

# add max quality
mem_ancestors_grudge_roll_quality_max_add = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_quality_max
			value = 1
		}
	}
}

# substract max quality
mem_ancestors_grudge_roll_quality_max_sub = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_quality_max
			value = -1
		}
	}
}

# add min purity
mem_ancestors_grudge_roll_purity_min_add = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_purity_min
			value = 1
		}
	}
}

# substract min purity
mem_ancestors_grudge_roll_purity_min_sub = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_purity_min
			value = -1
		}
	}
}

# add max purity
mem_ancestors_grudge_roll_purity_max_add = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_purity_max
			value = 1
		}
	}
}

# substract max purity
mem_ancestors_grudge_roll_purity_max_sub = {
	hidden_effect = {
		change_variable = {
			which = mem_ancestors_grudge_rune_purity_max
			value = -1
		}
	}
}

# fix edge cases after min max changing events
mem_ancestors_grudge_roll_fix = {
	if = {
		limit = {
			check_variable = {
				which = mem_ancestors_grudge_smithing_quality_min
				value > mem_ancestors_grudge_smithing_quality_max
			}
		}
		random_list = {
			1 = {
				change_variable = {
					which = mem_ancestors_grudge_smithing_quality_max
					value = mem_ancestors_grudge_smithing_quality_min
				}
			}
			1 = {
				change_variable = {
					which = mem_ancestors_grudge_smithing_quality_min
					value = mem_ancestors_grudge_smithing_quality_max
				}
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				which = mem_ancestors_grudge_rune_purity_min
				value > mem_ancestors_grudge_rune_purity_max
			}
		}
		random_list = {
			1 = {
				change_variable = {
					which = mem_ancestors_grudge_rune_purity_max
					value = mem_ancestors_grudge_rune_purity_min
				}
			}
			1 = {
				change_variable = {
					which = mem_ancestors_grudge_rune_purity_min
					value = mem_ancestors_grudge_rune_purity_max
				}
			}
		}
	}
}
